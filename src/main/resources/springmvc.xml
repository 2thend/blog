<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
		
		 <context:property-placeholder location="classpath:yonyou.properties"/>
		
		<!--  注解的支持
		<mvc:annotation-driven/> :
		1.在springmvc中如果使用注解化，那么必须设置这个
		2.*conversion-service指向自定义转化器,如果没有自定义转化器,不用设置这个属性
		3.如果在配置文件中使用了<mvc:view-controller>,那么必须使用这个注解,不然会出现异常
		4.实际开发中,都需要对这个注解进行配置
		<mvc:annotation-driven conversion-service="conversionService"/>
		-->
		<mvc:annotation-driven/>
		
		<!-- 
		设置自定义转化器:
		1.除了自定义的转化器以外,其他以前的转化器还是存在的.
		2.converters属性指向的是自定义的转化器
		3.<bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		 	<property name="converters" ref="userConversionService"></property>
		 </bean>+<mvc:annotation-driven conversion-service="conversionService"/>
		 可以使用自定义转化器和默认的转化器（springmvc默认的转化器是DefaultFormattingConversionService。可以进行大部分的数据类型的转化）
		 -->

		<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
			<property name="converters" ref="userConversionService"/>
		</bean>
		<!-- 设置扫描的包 -->
		<context:component-scan base-package=".." use-default-filters="false">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		</context:component-scan>
		
		<!-- 设置自定义解析器
		1.将逻辑路径转化为物理路径:prefix+url+suffix(下面:/WEB-INF/views/module/url.jsp)
		 -->
		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="suffix" value=".jsp"></property>
			<property name="prefix" value="/WEB-INF/views/module/"></property>
		</bean>
		
		<!-- 
		，会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler,
		    它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果
		    不是静态资源的请求，才由DispatcherServlet继续处理,也就是说，如果配置了这个的话，那么所以的静态文件都不会被拦截,如果不是静态文件,那么就会抛出404错误
		 -->
		<mvc:default-servlet-handler/>
		 
		<!-- 静态资源文件映射
			这个比上面的那个更进一步,发现是静态路径的时候,不由DispatcherServlet,
			并且可以指定静态资源的路径
		 -->
		<mvc:resources location="/static/" mapping="/static/**"/>  
		
		<!-- 设置直接路径映射  不用经过处理器,如果直接在浏览器敲‘/’,那么直接就跳到首页
		如果配置了这个标签,那么必须配置<mvc:view-controller>标签
		 -->
		<mvc:view-controller path="/" view-name="redirect:/f"/>
		
		<!--
		blog/testConversion==>WEB-INF/module/views/test/testConversion.jsp
		 -->
		<mvc:view-controller path="/testConversion" view-name="test/testConversion"/>
		<!-- 
		设置拦截器
		 -->
		<mvc:interceptors>
			<mvc:interceptor>
				<mvc:mapping path="/**"/>
				<bean class="com.yonyou.hotusm.module.sys.interceptor.LogInterceptor"/>
			</mvc:interceptor>
		</mvc:interceptors>
		<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->  
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
    		<property name="maxUploadSize" value="10485760" />  
		</bean>
		<!-- 1.配置视图BeanNameViewResolver解析器:使用视图的名字来解析视图
			通过order属性来定义视图解析器的优先级，order的值越小优先级越高
			2.因为我们自定义了一个视图.所以使用这个解析器，对于每一个的处理器,都会进行所以的解析器解析
			对于第一种解析不了的视图,在进行第二种解析器解析
		 -->
		<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
			<property name="order" value="100"/>
		</bean>
		<!-- 配置国际化资源文件 -->
		<bean id="" class="org.springframework.context.support.ResourceBundleMessageSource">
			<property name="basename" value="i18n"/>
		</bean>
		
		<!-- 配置freemark -->
		<bean id="freemarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/views/module/"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">10</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
            </props>
        </property>
        <!-- 设置模板中的属性	
	        public void setFreemarkerVariables(Map<String, Object> variables) {
			this.freemarkerVariables = variables;}
		 -->
        <property name="freemarkerVariables">
            <map>
                <entry key="ctx" value="/blog"/>
            </map>
        </property>
    </bean>
      <!-- FreeMarker视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <property name="requestContextAttribute" value="request"/>
         <!-- 多ViewResovler配置  ，值越小就优先解析，这里的配置是 先找 ftl，再去找 mv ,最后去找jsp文件 -->   
        <property name="order" value="1" /> 
        <property name="cache" value="true"/>
    </bean>
</beans>
